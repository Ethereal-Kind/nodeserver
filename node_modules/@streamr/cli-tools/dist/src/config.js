"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = void 0;
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const fs_1 = require("fs");
/*
 * Validate that the config contains at least one root level element: the "client" block.
 * The values of the "client" blocks are validated by StreamrClient when the configuration
 * is used.
 *
 * We don't check other root level elements. It is ok to use a Broker config file as
 * a cli-tools config file. In that case the file contains e.g. "plugins" block,
 * but cli-tools can just ignore that block.
 */
const validateConfig = (config, fileName) => {
    const CLIENT_CONFIG_BLOCK = 'client';
    if (config[CLIENT_CONFIG_BLOCK] === undefined) {
        throw new Error(`Missing root element "${CLIENT_CONFIG_BLOCK}" in ${fileName}`);
    }
};
const tryReadConfigFile = (fileName) => {
    let content;
    try {
        content = (0, fs_1.readFileSync)(fileName, 'utf8');
    }
    catch (e) {
        return undefined;
    }
    const json = JSON.parse(content);
    validateConfig(json, fileName);
    return json;
};
const getConfig = (id) => {
    const CONFIG_DIRECTORY = path_1.default.join(os_1.default.homedir(), '.streamr', 'config');
    if (id !== undefined) {
        const fileNames = [
            id,
            path_1.default.join(CONFIG_DIRECTORY, `${id}.json`),
        ];
        for (const fileName of fileNames) {
            const content = tryReadConfigFile(fileName);
            if (content !== undefined) {
                return content;
            }
        }
        throw new Error('Config file not found');
    }
    else {
        const fileName = path_1.default.join(CONFIG_DIRECTORY, `default.json`);
        return tryReadConfigFile(fileName);
    }
};
exports.getConfig = getConfig;
//# sourceMappingURL=config.js.map