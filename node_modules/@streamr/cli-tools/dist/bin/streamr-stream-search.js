#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("../src/logLevel");
const command_1 = require("../src/command");
const commander_1 = require("commander");
const permission_1 = require("../src/permission");
const common_1 = require("../src/common");
const createPermissionFilter = async (user, allowPublic, allOf, anyOf, client) => {
    if (user !== undefined) {
        return {
            user: ((0, common_1.getOptionType)(user) === common_1.OptionType.ARGUMENT) ? user : await client.getAddress(),
            allowPublic: allowPublic !== null && allowPublic !== void 0 ? allowPublic : false,
            allOf,
            anyOf
        };
    }
    else if ((allowPublic !== undefined) || (allOf !== undefined) || (anyOf !== undefined)) {
        console.error('specify a user with "--user" when using "--public", "--all" or "--any"');
        process.exit(1);
    }
};
const createPermissionListOption = (id) => {
    return new commander_1.Option(`--${id} <permissions>`, 'comma-separated list of permissions')
        .choices(Array.from(permission_1.PERMISSIONS.keys()))
        .argParser((value) => value.split(',').map((id) => (0, permission_1.getPermission)(id)));
};
(0, command_1.createClientCommand)(async (client, term, options) => {
    const permissionFilter = await createPermissionFilter(options.user, options.public, options.all, options.any, client);
    const streams = client.searchStreams(term, permissionFilter);
    for await (const stream of streams) {
        console.log(stream.id);
    }
})
    .arguments('[term]')
    .description('search streams')
    .option('--user [user]', 'a stream must have permissions for the given user, defaults to the authenticated user')
    .option('--public', 'the permission can be implicit (a public permission to the stream)')
    .addOption(createPermissionListOption('all'))
    .addOption(createPermissionListOption('any'))
    .parseAsync();
//# sourceMappingURL=streamr-stream-search.js.map