#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("../src/logLevel");
const command_1 = require("../src/command");
const resend_1 = require("../src/resend");
(0, command_1.createClientCommand)(async (client, from, to, streamId, options) => {
    const resendOptions = {
        from: {
            timestamp: Date.parse(from),
            sequenceNumber: 0
        },
        to: {
            timestamp: Date.parse(to),
            sequenceNumber: 0
        },
        publisherId: options.publisherId,
        msgChainId: options.msgChainId
    };
    (0, resend_1.assertBothOrNoneDefined)('publisherId', 'msgChainId', '--publisher-id must be accompanied by option --msg-chain-id', options);
    await (0, resend_1.resend)(streamId, resendOptions, client, false);
}, {
    clientOptionsFactory: (options) => ({
        orderMessages: !options.disableOrdering
    })
})
    .arguments('<from> <to> <streamId>')
    .description('request messages between two given date-times (format: "YYYY-MM-DDTHH:mm:ss.sssZ")')
    .option('--publisher-id <string>', 'filter results by publisher')
    .option('--msg-chain-id <string>', 'filter results by message chain')
    .option('-d, --disable-ordering', 'disable ordering of messages by OrderingUtil', false)
    .parseAsync();
//# sourceMappingURL=streamr-stream-resend-range.js.map