/**
 * Session token caching and async init.
 */
import { DependencyContainer } from 'tsyringe';
import EventEmitter from 'eventemitter3';
import { TokenObject } from './LoginEndpoints';
import { AuthConfig } from './Ethereum';
declare enum State {
    LOGGING_OUT = "logging out",
    LOGGED_OUT = "logged out",
    LOGGING_IN = "logging in",
    LOGGED_IN = "logged in"
}
export default class Session extends EventEmitter {
    private container;
    private options;
    private state;
    private sessionTokenPromise?;
    constructor(container: DependencyContainer, options: AuthConfig);
    isUnauthenticated(): boolean;
    updateState(newState: State): void;
    private get loginEndpoints();
    sendLogin(): Promise<TokenObject>;
    getSessionToken(requireNewToken?: boolean): Promise<string>;
    logout(): Promise<void>;
}
export {};
